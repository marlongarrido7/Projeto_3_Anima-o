# Generated Cmake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.0)
set(toolchainVersion 13_3_Rel1)
set(picotoolVersion 2.1.0)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico_w CACHE STRING "Board type") # Pico W é usado aqui; altere se necessário

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(vogal C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1
# Certifique-se de que o arquivo principal está correto
add_executable(vogal vogal.c)

# Nome e versão do programa
pico_set_program_name(vogal "vogal")
pico_set_program_version(vogal "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(vogal 0) # Saída UART desativada
pico_enable_stdio_usb(vogal 1) # Saída USB ativada

# Add the standard library to the build
target_link_libraries(vogal
        pico_stdlib
        hardware_pio
        hardware_clocks
        hardware_pwm) # Adiciona suporte ao hardware PWM

# Add the standard include files to the build
target_include_directories(vogal PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
)

# Process the .pio file and generate the corresponding header
pico_generate_pio_header(vogal ${CMAKE_CURRENT_LIST_DIR}/vogal.pio)

# Garante a geração de arquivos .uf2 e outros formatos de saída
pico_add_extra_outputs(vogal)
